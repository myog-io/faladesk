services:
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    command: daphne -b 0.0.0.0 -p 8000 faladesk_backend.asgi:application
    volumes:
      - ./backend:/app
    env_file:
      - .env
    environment:
      DJANGO_SETTINGS_MODULE: faladesk_backend.settings.dev
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  celery_worker:
    build:
      context: .
      dockerfile: backend/Dockerfile
    command: celery -A faladesk_backend worker -l info
    volumes:
      - ./backend:/app
    env_file:
      - .env
    environment:
      DJANGO_SETTINGS_MODULE: faladesk_backend.settings.dev
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  celery_beat:
    build:
      context: .
      dockerfile: backend/Dockerfile
    command: celery -A faladesk_backend beat -l info
    volumes:
      - ./backend:/app
    env_file:
      - .env
    environment:
      DJANGO_SETTINGS_MODULE: faladesk_backend.settings.dev
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-faladesk}
      POSTGRES_USER: ${POSTGRES_USER:-faladesk}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-faladesk}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-faladesk}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  frontend:
    image: node:20-alpine
    working_dir: /app
    command: sh -c "npm install && npm run start"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    ports:
      - "8100:8100"
    environment:
      NG_APP_API_BASE_URL: ${NG_APP_API_BASE_URL:-http://backend:8000/api}
      NG_APP_WS_BASE_URL: ${NG_APP_WS_BASE_URL:-ws://backend:8000/ws}
      NG_APP_TENANT_SLUG: ${NG_APP_TENANT_SLUG:-demo}
    depends_on:
      backend:
        condition: service_started

volumes:
  postgres_data:
  redis_data:
  frontend_node_modules:
